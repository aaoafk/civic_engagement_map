<% include ../partials/HEAD %>

    <!-- Add scripts here needed for mapbox geocoding -->
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.0/mapbox-gl-geocoder.min.js'></script>
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.0/mapbox-gl-geocoder.css' type='text/css' />

    <div id="wrap">
        <div id="main" style="padding-bottom: 0px;">

            <div class="section" style="margin-bottom: 0;">
                <div class="row">
                    <!-- Div to contain a rendering of available elements to the right-->
                    <div class="col-3" id="pin_listing" style="overflow-y: scroll; height: 800px;">
                        <h1 class='ui dividing header'> What's near you? </h1>
                        <div id="listings" class="listings"></div>
                    </div>
                    <div class="col-9" id="map" style="padding-left: 0;"></div>
                </div>
            </div>

              <script type="text/javascript">

                const zoom = 5;

                /* Declaration for pop-up display */
                let markerHeight = 50, markerRadius = 10, linearOffset = 25;
                const popupOffsets = {
                     'top': [0, 0],
                    'top-left': [0,0],
                    'top-right': [0,0],
                    'bottom': [0, -markerHeight],
                    'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
                    'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
                    'left': [markerRadius, (markerHeight - markerRadius) * -1],
                    'right': [-markerRadius, (markerHeight - markerRadius) * -1]
                };

                window.addEventListener("load", () => {
                    const gusers = <%- users %>;

                    mapboxgl.accessToken =
                    "pk.eyJ1IjoiY2VtLXYxIiwiYSI6ImNqeDN1YzhpMDAyemQ0YmtqZ215ZjNka28ifQ.VVjQaf1asGGBnwZKQf7ZyA";
                    let map = new mapboxgl.Map({
                        container: "map",
                        style: "mapbox://styles/cem-v1/cjx4tqsuf0ndu1clmieo3pc0u",
                        center: [-75.3523, 39.9040],
                        zoom: 15
                    });

                    const pretty_users = [];

                    gusers.forEach( function(ele) {
                        pretty_users.push({
                            "type": ele.type,
                            "geometry": ele.geometry,
                            "properties": ele.properties
                        })
                    });



                    map.on("load", function () {
                        map.addLayer({
                            "id": "points",
                            "type": "symbol",
                            "source": {
                                "type":  "geojson",
                                "data": {
                                    "type": "FeatureCollection",

                                    //users is an array of geoJson.
                                    "features": pretty_users

                                }
                            },

                            /* Here we need to add all of our styling and make sure that
                               the appropriate text descriptions appear for our markers.
                            */
                            "layout": {
                                "icon-image": "marker-15",
                                "icon-allow-overlap": true,
                                "text-font" : ["Open Sans Semibold", "Arial Unicode MS Bold"],
                                "text-offset": [0, 0.6],
                                "text-anchor": "top"
                            }
                        });


                        /* This function will build the listings of all of our pins that we need to display */
                        function buildLocationList(data) {
                            // Iterate through the list of pins
                            for (i = 0; i < data.length; i++) {
                                console.log("Data at i is: ", data[i]);
                                let currentFeature = data[i];
                                // Shorten data.feature.properties to `prop` so we're not
                                // writing this long form over and over again.
                                let prop = currentFeature.properties;
                                // Select the listing container in the HTML and append a div
                                // with the class 'item' for each store
                                let listings = document.getElementById('listings');
                                let listing = listings.appendChild(document.createElement('div'));
                                listing.className = 'item';
                                listing.id = 'listing-' + i;
                                //listing.className = 'card border-secondary bg-light mb-3';
                            
                                //Create a header for this card and append it to listing
                                let listing_header = listing.appendChild(document.createElement('a'));
                                listing_header.className = 'card-header';

                                var link = listing_header.appendChild(document.createElement('a')); 
                                link.href = "#";
                                link.className = 'title';
                                link.dataPosition = i;
                                link.innerHTML = prop.title;

                                link.addEventListener('click', function(e) {
                                    // Update the currentFeature to the store associated with the clicked link
                                    var clickedListing = data[this.dataPosition];
                                    // 1. Fly to the point associated with the clicked link
                                    flyToPin(clickedListing);
                                    // 2. Highlight listing in sidebar (and remove highlight for all other listings)
                                    var activeItem = document.getElementsByClassName('active');
                                    if (activeItem[0]) {
                                        activeItem[0].classList.remove('active');
                                    }
                                    this.parentNode.classList.add('active');
                                });


                                //Create a body for this cards content and append it to listing
                                let listing_content = listing.appendChild(document.createElement('div'));
                                listing_content.className = 'card-body';

                                //Append our text to body
                                let listing_text = listing_content.appendChild(document.createElement('p'));
                                listing_text.className = 'card-text';

                                //Here we truncate the string to make sure our card format stays nice and compact. If prop.description exists
                                //This won't affect user visibility if we have an option to view more on a different page
                                if (prop.description) {
                                    if(prop.description.length > 350) {
                                        listing_text.innerHTML += "Description: " + "<br/ >";
                                        listing_text.innerHTML += prop.description.substring(0, 350);
                                        listing_text.innerHTML += "...";
                                        listing_text.innerHTML += "<br/ >";
                                    } else {
                                        listing_text.innerHTML += "Description: " + "<br/ >";
                                        listing_text.innerHTML += prop.description;
                                        listing_text.innerHTML += "<br/ >";
                                    }
                                }

                                //If prop contact email exists add it to our listing_text innerHTML
                                if(prop.community_partners) { 
                                    listing_text.innerHTML += "<br/ >";
                                    listing_text.innerHTML += "Other Community Partners: " + prop.community_partners;
                                    listing_text.innerHTML += "<br/ >";
                                }

                                if(prop.contact) { 
                                    listing_text.innerHTML += "<br/ >";
                                    listing_text.innerHTML += "Contact Name: " + prop.contact;
                                    listing_text.innerHTML += "<br/ >";
                                }

                                if(prop.contact_email) {
                                    listing_text.innerHTML += "<br/ >";
                                    listing_text.innerHTML += "Contact Email: " + prop.contact_email;
                                    listing_text.innerHTML += "<br/ >";
                                }
                            }

                        }

                        buildLocationList(pretty_users);

                        /* Go to pin that the user clicks on from listings */
                        function flyToPin(currentFeature) {
                            map.flyTo({
                                center: currentFeature.geometry.coordinates,
                                zoom: 15
                            });
                        }
                        // Add an event listener for the links in the sidebar listing

                    });

                    map.on('click', 'points', function(e) {


                        let ele = map.queryRenderedFeatures(e.point, { layers: ['points'] });
                        console.log(ele);

                        /* These elements need to be parsed an extra time because they still had back slashes
                        ele[0].properties.owner = JSON.parse(ele[0].properties.owner);
                        console.log(ele[0].properties.owner.id);
                        console.log(ele[0].properties.owner.username);
                        */
                        

                        /* Create an element with the popup content and add it to our popups DOMContent */
                        let content = ele[0].properties;

                        /* everything is a child of our root div */
                        let root_div = window.document.createElement('div');
                        root_div.className = "ui card";

                        let div1 = window.document.createElement('div');
                        div1.className = 'content';
                        div1_header = window.document.createElement('div');
                        div1_header.className = 'header';
                        div1_header.innerHTML = content.title;

                        let div1_meta = window.document.createElement('div');
                        div1_meta.className = 'meta';
                        div1_meta.innerHTML = 'our mission';
                        div1_description = window.document.createElement('div');
                        div1_description.className = 'description';

                        let div1_description_text = window.document.createElement('p');

                        /* Truncate description so our pins content doesn't fill up entire screen */
                        if(content.description.length > 350) {
                            content.description = content.description.substring(0,349);
                            div1_description_text.innerHTML += content.description;
                            div1_description_text.innerHTML += "...";
                        } else {
                            div1_description_text.innerHTML += content.description;
                        }

                        /* need to add contact, contact_email, community_partners */

                        let div2_meta = window.document.createElement('div');
                        div2_meta.className = 'meta';
                        div2_meta.innerHTML = 'contact name';

                        let div2_description = window.document.createElement('div');
                        div2_description.innerHTML = content.contact;

                        let div3_meta = window.document.createElement('div');
                        div3_meta.className = 'meta';
                        div3_meta.innerHTML = 'contact email';


                        let div3_description = window.document.createElement('div');
                        div3_description.innerHTML = content.contact_email;

                        let div4_meta = window.document.createElement('div');
                        div4_meta.className = 'meta';
                        div4_meta.innerHTML = 'community partners';


                        let div4_description = window.document.createElement('div');
                        div4_description.innerHTML = content.community_partners;

                        /* We want to create a button that'll allow us to view more info about this pin! */
                        let view_more_div = window.document.createElement('div');
                        let view_more_anchor = window.document.createElement('a');

                        ele[0].properties.self = JSON.parse(ele[0].properties.self);
                        console.log(ele[0].properties.self._id);

                        /* TODO: Hey Tony, heres what I want to do... For this route I want to be able to
                        route my user to a page where they can view information about this pin.
                        I want to set the view_more_button.href to '/cem_map/ele[0].properties.self._id'
                        But I keep getting a weird error... i.e. it says ele isn't defined which it clearly
                        is above... I think this might be a security issue maybe?
                        */
                        view_more_anchor.href = 'cem_map/' + String(ele[0].properties.self._id);
                        view_more_anchor.innerHTML = 'View More';

                        div1.appendChild(div1_header);
                        div1.appendChild(div1_meta);
                        div1_description.appendChild(div1_description_text);
                        div1.appendChild(div1_description);
                        div1.appendChild(div2_meta);
                        div1.appendChild(div2_description);
                        div1.appendChild(div3_meta);
                        div1.appendChild(div3_description);
                        div1.appendChild(div4_meta);
                        div1.appendChild(div4_description);
                        div1.appendChild(view_more_div);
                        div1.appendChild(view_more_anchor);

                        /* ATTACH EVERYTHING TO OUR ROOT DIV */
                        root_div.appendChild(div1);

                        let popup = new mapboxgl.Popup({offset: popupOffsets, className: 'my-class'})
                            .setLngLat(ele[0].geometry.coordinates)
                            .setDOMContent(root_div)
                            .setMaxWidth("300px")
                            .addTo(map);
                    });

                    /* add some interactivity to this on mouse enter we want to change the pointer
                       to reflect selection
                    */

                    map.on('mouseenter', 'points', function () {
                        map.getCanvas().style.cursor = 'pointer';
                    });
                    map.on('mouseleave', 'points', function () {
                        map.getCanvas().style.cursor = '';
                    });

                    map.addControl(new MapboxGeocoder({
                        accessToken: mapboxgl.accessToken,
                        mapboxgl: mapboxgl
                    }));
                });
              </script>
        </div>
    </div>

<% include ../partials/FOOT %>
