<% include ../partials/HEAD %>

    <!-- Add scripts here needed for mapbox geocoding -->
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.0/mapbox-gl-geocoder.min.js'></script>
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.0/mapbox-gl-geocoder.css' type='text/css' />

    <div id="wrap">
        <div id="main" style="padding-bottom: 0px;">

            <div class="section" style="margin-bottom: 0;">
                <div class="row">
                    <!-- Div to contain a rendering of available elements to the right-->
                    <div class="col-3" id="pin_content"></div>
                    <div class="col-9" id="map" style="padding-left: 0;"></div>
                </div>
            </div>

              <script type="text/javascript">

                const zoom = 5;

                /* Declaration for pop-up display */
                let markerHeight = 50, markerRadius = 10, linearOffset = 25;
                const popupOffsets = {
                     'top': [0, 0],
                    'top-left': [0,0],
                    'top-right': [0,0],
                    'bottom': [0, -markerHeight],
                    'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
                    'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
                    'left': [markerRadius, (markerHeight - markerRadius) * -1],
                    'right': [-markerRadius, (markerHeight - markerRadius) * -1]
                };

                window.addEventListener("load", () => {
                    const gusers = <%- users %>;

                    mapboxgl.accessToken =
                    "pk.eyJ1IjoiY2VtLXYxIiwiYSI6ImNqeDN1YzhpMDAyemQ0YmtqZ215ZjNka28ifQ.VVjQaf1asGGBnwZKQf7ZyA";
                    let map = new mapboxgl.Map({
                        container: "map",
                        style: "mapbox://styles/cem-v1/cjx4tqsuf0ndu1clmieo3pc0u",
                        zoom: 2
                    });

                    const pretty_users = [];

                    gusers.forEach( function(ele) {
                        pretty_users.push({
                            "type": ele.type,
                            "geometry": ele.geometry,
                            "properties": ele.properties
                        })
                    });



                    map.on("load", function () {
                        map.addLayer({
                            "id": "points",
                            "type": "symbol",
                            "source": {
                                "type":  "geojson",
                                "data": {
                                    "type": "FeatureCollection",

                                    //users is an array of geoJson.
                                    "features": pretty_users

                                }
                            },

                            /* Here we need to add all of our styling and make sure that
                               the appropriate text descriptions appear for our markers.
                            */
                            "layout": {
                                "icon-image": "marker-15",
                                "icon-allow-overlap": true,
                                "text-font" : ["Open Sans Semibold", "Arial Unicode MS Bold"],
                                "text-offset": [0, 0.6],
                                "text-anchor": "top"
                            }
                        });
                    });

                    /* inspect a point on click */
                    map.on('click', 'points', function (e) {

                        /* use map.queryRenderedFeatures to grab that object on click */
                        let ele = map.queryRenderedFeatures(e.point, { layers: ['points'] });

                        map.easeTo({
                            center: (ele[0].geometry.coordinates),
                            zoom: zoom
                        });

                    });

                    map.on('click', 'points', function(e) {


                        let ele = map.queryRenderedFeatures(e.point, { layers: ['points'] });
                        

                        /* Create an element with the popup content and add it to our popups DOMContent */
                        let content = ele[0].properties;
                        console.log(content);

                        /* everything is a child of our root div */
                        let root_div = window.document.createElement('div');
                        root_div.className = "ui card";

                        let div1 = window.document.createElement('div');
                        div1.className = 'content';
                        div1_header = window.document.createElement('div');
                        div1_header.className = 'header';
                        div1_header.innerHTML = content.title;

                        let div1_meta = window.document.createElement('div');
                        div1_meta.className = 'meta';
                        div1_meta.innerHTML = 'our mission';
                        div1_description = window.document.createElement('div');
                        div1_description.className = 'description';

                        let div1_description_text = window.document.createElement('p');
                        div1_description_text.innerHTML = content.description;

                        /* need to add contact, contact_email, community_partners */

                        let div2_meta = window.document.createElement('div');
                        div2_meta.className = 'meta';
                        div2_meta.innerHTML = 'contact name';

                        let div2_description = window.document.createElement('div');
                        div2_description.innerHTML = content.contact;

                        let div3_meta = window.document.createElement('div');
                        div3_meta.className = 'meta';
                        div3_meta.innerHTML = 'contact email';


                        let div3_description = window.document.createElement('div');
                        div3_description.innerHTML = content.contact_email;

                        let div4_meta = window.document.createElement('div');
                        div4_meta.className = 'meta';
                        div4_meta.innerHTML = 'community partners';


                        let div4_description = window.document.createElement('div');
                        div4_description.innerHTML = content.community_partners;

                        div1.appendChild(div1_header);
                        div1.appendChild(div1_meta);
                        div1_description.appendChild(div1_description_text);
                        div1.appendChild(div1_description);
                        div1.appendChild(div2_meta);
                        div1.appendChild(div2_description);
                        div1.appendChild(div3_meta);
                        div1.appendChild(div3_description);
                        div1.appendChild(div4_meta);
                        div1.appendChild(div4_description);

                        /* ATTACH EVERYTHING TO OUR ROOT DIV */
                        root_div.appendChild(div1);

                        let popup = new mapboxgl.Popup({offset: popupOffsets, className: 'my-class'})
                            .setLngLat(ele[0].geometry.coordinates)
                            .setDOMContent(root_div)
                            .setMaxWidth("300px")
                            .addTo(map);
                    });

                    /* add some interactivity to this on mouse enter we want to change the pointer
                       to reflect selection
                    */

                    map.on('mouseenter', 'points', function () {
                        map.getCanvas().style.cursor = 'pointer';
                    });
                    map.on('mouseleave', 'points', function () {
                        map.getCanvas().style.cursor = '';
                    });

                    map.addControl(new MapboxGeocoder({
                        accessToken: mapboxgl.accessToken,
                        mapboxgl: mapboxgl
                    }));
                });
              </script>
        </div>
    </div>

<% include ../partials/FOOT %>
